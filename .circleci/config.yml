version: 2.1
orbs:
    node: circleci/node@1.1.6
commands:
    install-dependencies:
        description: 'Check if dependencies exist in cache and store newly installed dependencies to cache'
        steps:
            - restore_cache:
                  keys:
                      - v1-npm-deps-{{ .Branch }}-{{ checksum "package-lock.json" }}
                      - v1-npm-deps-{{ .Branch }}-
                      - v1-npm-deps-
            - run: npm install
            - save_cache:
                  key: v1-npm-deps-{{ .Branch }}-{{ checksum "package-lock.json" }}
                  paths:
                      - node_modules/
    check-port-listening:
        parameters:
            port:
                type: string
                default: '3306'
        steps:
            - run:
                  # Our primary container isn't MYSQL so run a sleep command until it's ready.
                  name: Waiting for port to start listening
                  command: |
                      for i in `seq 1 10`;
                      do
                        npx is-port-listening --port=<< parameters.port >> && echo Success && exit 0
                        echo -n .
                        sleep 2
                      done
                      echo Failed waiting for MySQL && exit 1
jobs:
    test-mysql:
        environment:
            SEQUELIZE_URL: mysql://root:password@localhost:3306/ci
        executor:
            name: node/default
        docker:
            - image: node:12
            - image: circleci/mysql:5.7
              environment:
                  MYSQL_DATABASE: ci
                  MYSQL_ROOT_PASSWORD: password

        steps:
            - checkout
            - node/with-cache:
                  steps:
                      - run: npm install
                      - run: npm install mysql2
                      - check-port-listening:
                            port: '3306'
                      - run: npm run build
                      - run: npm run test
    test-postgres:
        environment:
            SEQUELIZE_URL: postgres://postgres:postgres@localhost:5432/ci
        executor:
            name: node/default
        docker:
            - image: node:12
            - image: postgres
              environment:
                  POSTGRES_USER: postgres
                  POSTGRES_PASSWORD: postgres
                  POSTGRES_DB: ci
        steps:
            - checkout
            - node/with-cache:
                  steps:
                      - run: npm install
                      - run: npm install pg pg-native
                      - check-port-listening:
                            port: '5432'
                      - run: npm run build
                      - run: npm test
    test-sqlite:
        executor:
            name: node/default
        docker:
            - image: node:12
        environment:
            COVERALLS_GIT_BRANCH: ${ CIRCLE_BRANCH }
        steps:
            - checkout
            - node/with-cache:
                  steps:
                      - run: npm install
                      - run: npm install sqlite3
                      - run: npm run build
                      - run: npm test
                      - run: npm run coverage
    react-unit-tests:
        executor:
            name: node/default
        steps:
            - checkout
            - install-dependencies
            - run: npm test
    flow-typings:
        executor:
            name: node/default
        steps:
            - checkout
            - install-dependencies
            - run: npm run flow
    build-react:
        executor:
            name: node/default
        steps:
            - checkout
            - install-dependencies
            - restore_cache:
                  keys:
                      - v1-react-build-{{ .Branch }}-{{ checksum "package-lock.json" }}
                      - v1-react-build-{{ .Branch }}-
                      - v1-react-build-

            - run: npm run build
            - save_cache:
                  key: v1-react-build-{{ .Branch }}-{{ checksum "package-lock.json" }}
                  paths:
                      - build
workflows:
    build-and-test:
        jobs:
            - test-mysql
            - test-postgres
            - test-sqlite
            - react-unit-tests
            - flow-typings
            - build-react
